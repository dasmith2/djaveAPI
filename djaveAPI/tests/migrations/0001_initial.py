# Generated by Django 3.0.5 on 2020-06-02 16:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MyFakeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, help_text='When was this object "deleted"? Deleted objects should basically be ignored. By simply marking objects as deleted instead of actually deleting them, I make it much simpler for you to write code that notices when objects in the API become deleted.', null=True)),
                ('name', models.CharField(max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('live', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ComplexFakeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, help_text='When was this object "deleted"? Deleted objects should basically be ignored. By simply marking objects as deleted instead of actually deleting them, I make it much simpler for you to write code that notices when objects in the API become deleted.', null=True)),
                ('small_int', models.IntegerField()),
                ('large_int', models.IntegerField(blank=True, null=True)),
                ('my_date', models.DateField()),
                ('my_date_time', models.DateTimeField()),
                ('my_char', models.CharField(max_length=100)),
                ('my_text', models.TextField()),
                ('my_fake_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='djaveAPITests.MyFakeModel')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('live', django.db.models.manager.Manager()),
            ],
        ),
    ]
